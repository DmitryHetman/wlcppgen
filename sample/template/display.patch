diff -Naur a/display.cpp b/display.cpp
--- a/display.cpp	2013-11-25 11:28:34.791769920 +0100
+++ b/display.cpp	2013-11-25 11:28:34.791769920 +0100
@@ -1,5 +1,5 @@
 
-#include "wlcpp.hpp"
+#include "display.hpp"
 
 /* The following code was generated from the "wayland" protocol specification.
  *
@@ -57,8 +57,72 @@
     : proxy(obj) {
 }
 
-display::display(proxy& factory)
-    : proxy(factory, interface) {
+display::display(const string& name)
+    : proxy(reinterpret_cast<wl_proxy*>(name.empty() ? wl_display_connect(nullptr) : wl_display_connect(name.c_str()))) {
+}
+
+display::display(int fd)
+    : proxy(reinterpret_cast<wl_proxy*>(wl_display_connect_to_fd(fd))) {
+}
+
+display::~display() {
+    destroy();
+}
+
+wl_display* display::wl_obj() const {
+    return reinterpret_cast<wl_display*>(proxy::wl_obj());
+}
+
+int display::get_fd() const {
+    return wl_display_get_fd(wl_obj());
+}
+
+int display::dispatch() {
+    return wl_display_dispatch(wl_obj());
+}
+
+int display::dispatch_queue(event_queue& queue) {
+    return wl_display_dispatch_queue(wl_obj(), queue.wl_obj());
+}
+
+int display::dispatch_queue_pending(event_queue& queue) {
+    return wl_display_dispatch_queue_pending(wl_obj(), queue.wl_obj());
+}
+
+int display::dispatch_pending() {
+    return wl_display_dispatch_pending(wl_obj());
+}
+
+int display::get_error() {
+    return wl_display_get_error(wl_obj());
+}
+
+int display::flush() {
+    return wl_display_flush(wl_obj());
+}
+
+int display::roundtrip() {
+    return wl_display_roundtrip(wl_obj());
+}
+
+event_queue display::create_queue() {
+    return event_queue(wl_display_create_queue(wl_obj()));
+}
+
+int display::prepare_read_queue(event_queue& queue) {
+    return wl_display_prepare_read_queue(wl_obj(), queue.wl_obj());
+}
+
+int display::prepare_read() {
+    return wl_display_prepare_read(wl_obj());
+}
+
+void display::cancel_read() {
+    wl_display_cancel_read(wl_obj());
+}
+
+int display::read_events() {
+    return wl_display_read_events(wl_obj());
 }
 
 callback display::sync() {
@@ -73,3 +137,10 @@
     return callback_;
 }
 
+void display::destroy() {
+    if(valid()) {
+        wl_display_disconnect(wl_obj());
+        invalidate();
+    }
+}
+
diff -Naur a/display.hpp b/display.hpp
--- a/display.hpp	2013-11-25 13:35:57.770624190 +0100
+++ b/display.hpp	2013-11-25 13:35:57.773957525 +0100
@@ -2,10 +2,8 @@
 #ifndef _WLCPP_DISPLAY_
 #define _WLCPP_DISPLAY_
 
-#include <functional>
-#include <string>
-#include <utility>
-#include "proxy.hpp"
+#include "wlcpp.hpp"
+#include "event_queue.hpp"
 
 /* The following code was generated from the "wayland" protocol specification.
  *
@@ -70,20 +68,34 @@
      */
     display(wl_proxy* obj = nullptr);
 
-    /** \brief Create new @ref display from factory
-     *  @param factory Object which acts as the factory
-     */
-    explicit display(proxy& factory);
+    explicit display(const std::string& name);
+
+    explicit display(int fd);
 
     /** \brief Default move constructor */
     display(display&& rhs) = default;
 
-    /** \brief Default destructor */
-    virtual ~display() = default;
+    /** \brief Destructor */
+    virtual ~display();
 
     /** \brief Default move assignment operator */
     display& operator=(display&& rhs) = default;
 
+    wl_display* wl_obj() const;
+    int get_fd() const;
+    int dispatch();
+    int dispatch_queue(event_queue& queue);
+    int dispatch_queue_pending(event_queue& queue);
+    int dispatch_pending();
+    int get_error();
+    int flush();
+    int roundtrip();
+    event_queue create_queue();
+    int prepare_read_queue(event_queue& queue);
+    int prepare_read();
+    void cancel_read();
+    int read_events();
+
     /** \brief asynchronous roundtrip
      *
      *  The sync request asks the server to emit the 'done' event on the returned
@@ -107,6 +119,9 @@
      *  @return
      */
     registry get_registry();
+
+protected:
+    void destroy() override;
 };
 
 } // namespace wlcpp
